Lesson-7: Formik
- Для роботи з сервером ми використовуємо HTTP запити
GET - отримання даних
POST - створення даних
PATCH - ЧАСТКОВОГО оновлення даних
PUT - повного оновлення даних
DELETE - видалення даних
- axios найпоширеніша бібліотека для робити з сервером
- функціонал для роботи з сервером виностимо в папку api
- запити виконуємо в useEffect з пустим масивом залежностей
- хорошою практикою є додавання індикатора завантаження
завжди потрібно оборобляти негативні сценарії при роботі з сервером

npx json-server server/db.json

Lesson-8: Memo,Refs,Context
useMemo - хук який вирішує проблему з "дорогими" js, обчисленнями, кешуючи результат виклику. Колбек повертає результат.
useRef - хук який не підвязаний до методів життєвого циклу, дозволяє отримати посилання на дом елемент напряму.
Context API - сховище в якому зберігаються дані. Доступний у всіх дочірніх компонентах незалежно від їхньої ієрархії.
Context API - вирішує проблему передачі пропсів між компонентами які знаходяться далеко один від одного.
useCAllback - хук який кешує ініціалізацію методу, вирішує проблему виділення нової памяті для константного методу. Повертає функцію.

======================================================

Lesson-9: React Router
React Router Dom - обгортка над нативними обєктами маршрутизації,яка спрощує написання та структуру коду.
BrowserRouter - компонент яким потрібно обгорнути все дерево компонентів для роботи з бібліотекою.
NavLink & Link - обгортки над тегом які мають свою внутрішню реалізацію, має додатковий клас active для стилізації.
Route - компонент який вирішує чи рендерити контент чи ні. Приймає path та element. Обовязково має бути вкладений в Routes.
useParams() - хук який повертає url параметри із адресної строки.
Outlet - компонент який буде рендерити те що між тегами та співпадає по path.